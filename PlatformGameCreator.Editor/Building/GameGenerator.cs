/*
 * 2D Platform Game Creator
 * Copyright (C) Milan Rybář. All rights reserved.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using PlatformGameCreator.Editor.Common;
using System.IO;
using PlatformGameCreator.Editor.Scenes;

namespace PlatformGameCreator.Editor.Building
{
    /// <summary>
    /// Generates the source code in C# for the game defined by the project.
    /// </summary>
    class GameGenerator
    {
        private TextWriter writer;

        /// <summary>
        /// Generates using of used namespaces.
        /// </summary>
        private void GenerateUsingNamespaces()
        {
            writer.WriteLine(@"/*
FILE WAS GENERATED BY 2D Platform Game Creator
*/

using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Media;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Input;
using FarseerPhysics.Dynamics;
using FarseerPhysics.Factories;
using FarseerPhysics.Collision;
using FarseerPhysics.Common;
using FarseerPhysics.Controllers;
using FarseerPhysics.Collision.Shapes;
using PlatformGameCreator.GameEngine;
using PlatformGameCreator.GameEngine.Assets;
using PlatformGameCreator.GameEngine.Scenes;
using PlatformGameCreator.GameEngine.Screens;
using PlatformGameCreator.GameEngine.Scripting;
using Path = PlatformGameCreator.GameEngine.Scenes.Path;
");
        }

        /// <summary>
        /// Generates program class with main method.
        /// </summary>
        private void GenerateProgram()
        {
            writer.WriteLine(@"    static class Program
    {
        static void Main(string[] args)
        {
            using (GameUsingPlatformGameCreator game = new GameUsingPlatformGameCreator())
            {
                game.Run();
            }
        }
    }");
        }

        /// <summary>
        /// Generates the source code in C# for the game defined by the project.
        /// </summary>
        /// <param name="textWriter">The <see cref="TextWriter"/> for writing the source code of the game.</param>
        /// <param name="buildType">Type of the build.</param>
        public void Generate(TextWriter textWriter, BuildType buildType)
        {
            writer = textWriter;

            // header
            GenerateUsingNamespaces();

            // namespace of the game
            writer.WriteLine("namespace GameUsingPlatformGameCreatorEditor");
            writer.WriteLine("{");

            // class with main method
            GenerateProgram();

            // game class
            writer.WriteLine(@"    class GameUsingPlatformGameCreator : PhysicsGame
    {
        public GameUsingPlatformGameCreator()
            : base()
        {");

            // size of the game window
            writer.WriteLine("graphics.PreferredBackBufferWidth = {0};", Project.Singleton.Settings.GameWindowWidth);
            writer.WriteLine("graphics.PreferredBackBufferHeight = {0};", Project.Singleton.Settings.GameWindowHeight);

            // fullscreen
            if (Project.Singleton.Settings.GameIsFullScreen) writer.WriteLine("graphics.IsFullScreen = true;");

            // content directory of the game
            writer.WriteLine(@"Content.RootDirectory = @""{0}"";", buildType == BuildType.Release ? "Content" : Project.Singleton.ContentDirectory);
            writer.WriteLine(@"        }

        protected override void Initialize()
        {
            base.Initialize();
");

            // start with the game with the current scene
            writer.WriteLine(@"            screenManager.AddScreen(new {0}());", SceneGenerator.GetSceneFullClassName(Project.Singleton.Scenes.SelectedScene));
            writer.WriteLine(@"        }
    }");

            SceneGenerator sceneGenerator = new SceneGenerator();

            // content for all scenes
            sceneGenerator.GenerateGlobalContent(textWriter, buildType);

            // scenes
            foreach (Scene scene in Project.Singleton.Scenes)
            {
                sceneGenerator.Generate(scene, textWriter, buildType);
            }

            // end of namespace of the game
            writer.WriteLine("}");
        }
    }
}
